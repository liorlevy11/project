{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u05D0\\u05D5\\u05E0\\u05D9\\u05D1\\u05E8\\u05E1\\u05D9\\u05D8\\u05D4\\\\\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD\\\\\\u05E1\\u05DE\\u05E1\\u05D8\\u05E8 \\u05D5\\\\cisco\\\\\\u200F\\u200Freact-table-tutorial - \\u05E2\\u05D5\\u05EA\\u05E7\\\\src\\\\components\\\\EC2DashboardPage.js\",\n  _s = $RefreshSig$();\nimport \"./EC2DashboardPage.css\";\nimport fakeData from \"../MOCK_DATA.json\";\nimport * as React from \"react\";\nimport { useTable } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EC2DashboardPage() {\n  _s();\n  const [sortKey, setSortKey] = React.useState(\"Type\"); // State to store the selected sort key\n  const [dropdownKey, setDropdownKey] = React.useState(\"ascending\"); // State to store the selected dropdown key\n  const [sortedData, setSortedData] = React.useState(fakeData); // State to store the sorted data\n  const [currentPage, setCurrentPage] = React.useState(1); // State to track the current page\n  const [showNextButton, setShowNextButton] = React.useState(sortedData.length > 1000); // State to determine if \"Next\" button should be displayed\n  const [sortError, setSortError] = React.useState(\"\"); // State to store sort error message\n\n  const pageSize = 1000; // Number of items displayed per page\n\n  const handleSort = () => {\n    if (!sortKey && !dropdownKey) {\n      setSortError(\"To sort, you must select the attribute to sort by and the order. Please select attribute and order.\");\n    } else if (!sortKey) {\n      setSortError(\"To sort, you must select the attribute to sort by. Please select attribute.\");\n    } else if (!dropdownKey) {\n      setSortError(\"To sort, you must select the attribute to sort by and the order. Please select order.\");\n    } else {\n      setSortError(\"\"); // Reset sort error message\n\n      setCurrentPage(1);\n      setShowNextButton(sortedData.length > pageSize);\n\n      // Perform the sorting logic based on sortKey and dropdownKey\n      let sortedData = [...fakeData];\n      if (sortKey && dropdownKey) {\n        sortedData.sort((a, b) => {\n          if (dropdownKey === \"ascending\") {\n            return a[sortKey].localeCompare(b[sortKey]);\n          } else if (dropdownKey === \"descending\") {\n            return b[sortKey].localeCompare(a[sortKey]);\n          }\n          return 0;\n        });\n      }\n      setSortedData(sortedData);\n    }\n  };\n  const handleClickNext = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n  };\n  const data = React.useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    return sortedData.slice(startIndex, endIndex);\n  }, [currentPage, sortedData]);\n  const columns = React.useMemo(() => [{\n    Header: \"Name\",\n    accessor: \"name\"\n  }, {\n    Header: \"ID\",\n    accessor: \"id\"\n  }, {\n    Header: \"Type\",\n    accessor: \"type\"\n  }, {\n    Header: \"State\",\n    accessor: \"state\"\n  }, {\n    Header: \"AZ\",\n    accessor: \"az\"\n  }, {\n    Header: \"Public IP\",\n    accessor: \"publicIP\"\n  }, {\n    Header: \"Private IPs\",\n    accessor: \"privateIPs\"\n  }], []);\n  React.useEffect(() => {\n    setShowNextButton(sortedData.length > pageSize && currentPage * pageSize < sortedData.length);\n  }, [sortedData, currentPage]);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Active EC2 Instances\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transparent-square\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"attribute-dropdown\",\n            value: sortKey,\n            onChange: e => setSortKey(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Attribute\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"name\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"id\",\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"type\",\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"state\",\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"az\",\n              children: \"AZ\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"publicIP\",\n              children: \"Public IP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"privateIPs\",\n              children: \"Private IPs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"order-dropdown\",\n            value: dropdownKey,\n            onChange: e => setDropdownKey(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ascending\",\n              children: \"Ascending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"descending\",\n              children: \"Descending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sort-button\",\n            onClick: handleSort,\n            children: \"Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            ...getTableProps(),\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n                ...headerGroup.getHeaderGroupProps(),\n                children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n                  ...column.getHeaderProps(),\n                  children: column.render(\"Header\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              ...getTableBodyProps(),\n              children: rows.map(row => {\n                prepareRow(row);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  ...row.getRowProps(),\n                  children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n                    ...cell.getCellProps(),\n                    children: cell.render(\"Cell\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\",\n          onClick: handleClickNext,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(EC2DashboardPage, \"iKhH5ilH7+z3ihIX9u00pJgVMx0=\", false, function () {\n  return [useTable];\n});\n_c = EC2DashboardPage;\nexport default EC2DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"EC2DashboardPage\");","map":{"version":3,"names":["fakeData","React","useTable","EC2DashboardPage","sortKey","setSortKey","useState","dropdownKey","setDropdownKey","sortedData","setSortedData","currentPage","setCurrentPage","showNextButton","setShowNextButton","length","sortError","setSortError","pageSize","handleSort","sort","a","b","localeCompare","handleClickNext","prevPage","data","useMemo","startIndex","endIndex","slice","columns","Header","accessor","useEffect","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","e","target","value","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"sources":["C:/אוניברסיטה/לימודים/סמסטר ו/cisco/‏‏react-table-tutorial - עותק/src/components/EC2DashboardPage.js"],"sourcesContent":["import \"./EC2DashboardPage.css\";\r\nimport fakeData from \"../MOCK_DATA.json\";\r\nimport * as React from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nfunction EC2DashboardPage() {\r\n  const [sortKey, setSortKey] = React.useState(\"Type\"); // State to store the selected sort key\r\n  const [dropdownKey, setDropdownKey] = React.useState(\"ascending\"); // State to store the selected dropdown key\r\n  const [sortedData, setSortedData] = React.useState(fakeData); // State to store the sorted data\r\n  const [currentPage, setCurrentPage] = React.useState(1); // State to track the current page\r\n  const [showNextButton, setShowNextButton] = React.useState(sortedData.length > 1000); // State to determine if \"Next\" button should be displayed\r\n  const [sortError, setSortError] = React.useState(\"\"); // State to store sort error message\r\n\r\n  const pageSize = 1000; // Number of items displayed per page\r\n\r\n  const handleSort = () => {\r\n    if (!sortKey && !dropdownKey) {\r\n      setSortError(\"To sort, you must select the attribute to sort by and the order. Please select attribute and order.\");\r\n    } else if (!sortKey) {\r\n      setSortError(\"To sort, you must select the attribute to sort by. Please select attribute.\");\r\n    } else if (!dropdownKey) {\r\n      setSortError(\"To sort, you must select the attribute to sort by and the order. Please select order.\");\r\n    } else {\r\n      setSortError(\"\"); // Reset sort error message\r\n\r\n      setCurrentPage(1);\r\n      setShowNextButton(sortedData.length > pageSize);\r\n\r\n      // Perform the sorting logic based on sortKey and dropdownKey\r\n      let sortedData = [...fakeData];\r\n      if (sortKey && dropdownKey) {\r\n        sortedData.sort((a, b) => {\r\n          if (dropdownKey === \"ascending\") {\r\n            return a[sortKey].localeCompare(b[sortKey]);\r\n          } else if (dropdownKey === \"descending\") {\r\n            return b[sortKey].localeCompare(a[sortKey]);\r\n          }\r\n          return 0;\r\n        });\r\n      }\r\n      setSortedData(sortedData);\r\n    }\r\n  };\r\n\r\n  const handleClickNext = () => {\r\n    setCurrentPage((prevPage) => prevPage + 1);\r\n  };\r\n\r\n\r\n  const data = React.useMemo(() => {\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    const endIndex = startIndex + pageSize;\r\n    return sortedData.slice(startIndex, endIndex);\r\n  }, [currentPage, sortedData]);\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Name\",\r\n        accessor: \"name\",\r\n      },\r\n      {\r\n        Header: \"ID\",\r\n        accessor: \"id\",\r\n      },\r\n      {\r\n        Header: \"Type\",\r\n        accessor: \"type\",\r\n      },\r\n      {\r\n        Header: \"State\",\r\n        accessor: \"state\",\r\n      },\r\n      {\r\n        Header: \"AZ\",\r\n        accessor: \"az\",\r\n      },\r\n      {\r\n        Header: \"Public IP\",\r\n        accessor: \"publicIP\",\r\n      },\r\n      {\r\n        Header: \"Private IPs\",\r\n        accessor: \"privateIPs\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    setShowNextButton(sortedData.length > pageSize && currentPage * pageSize < sortedData.length);\r\n  }, [sortedData, currentPage]);\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable({ columns, data });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"title\">Active EC2 Instances</h1>\r\n      <div className=\"container\">\r\n        <div className=\"transparent-square\">\r\n          <div className=\"dropdown-container\">\r\n            <select\r\n              className=\"attribute-dropdown\"\r\n              value={sortKey}\r\n              onChange={(e) => setSortKey(e.target.value)}\r\n            >\r\n              <option value=\"\">Select Attribute</option>\r\n              <option value=\"name\">Name</option>\r\n              <option value=\"id\">ID</option>\r\n              <option value=\"type\">Type</option>\r\n              <option value=\"state\">State</option>\r\n              <option value=\"az\">AZ</option>\r\n              <option value=\"publicIP\">Public IP</option>\r\n              <option value=\"privateIPs\">Private IPs</option>\r\n            </select>\r\n            <select\r\n              className=\"order-dropdown\"\r\n              value={dropdownKey}\r\n              onChange={(e) => setDropdownKey(e.target.value)}\r\n            >\r\n              <option value=\"\">Select Order</option>\r\n              <option value=\"ascending\">Ascending</option>\r\n              <option value=\"descending\">Descending</option>\r\n            </select>\r\n            <button className=\"sort-button\" onClick={handleSort}>\r\n              Sort\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"table-container\">\r\n          <div className=\"table-wrapper\">\r\n            <table {...getTableProps()}>\r\n              <thead>\r\n                {headerGroups.map((headerGroup) => (\r\n                  <tr {...headerGroup.getHeaderGroupProps()}>\r\n                    {headerGroup.headers.map((column) => (\r\n                      <th {...column.getHeaderProps()}>\r\n                        {column.render(\"Header\")}\r\n                      </th>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </thead>\r\n              <tbody {...getTableBodyProps()}>\r\n                {rows.map((row) => {\r\n                  prepareRow(row);\r\n                  return (\r\n                    <tr {...row.getRowProps()}>\r\n                      {row.cells.map((cell) => (\r\n                        <td {...cell.getCellProps()}>\r\n                          {cell.render(\"Cell\")}\r\n                        </td>\r\n                      ))}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        {showNextButton && (\r\n          <div className=\"next-button-container\">\r\n            <button className=\"next-button\" onClick={handleClickNext}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EC2DashboardPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}