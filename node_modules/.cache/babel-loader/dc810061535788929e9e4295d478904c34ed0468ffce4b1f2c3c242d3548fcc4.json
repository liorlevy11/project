{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst app = express();\nconst port = 3001;\nconst pageSize = 3;\n\n// Middleware to parse JSON body\napp.use(express.json());\n\n// Enable CORS for all routes\napp.use(cors());\n\n// In-memory storage for registered users\nconst registeredUsers = [];\n\n// Load the mock data\nconst mockData = require(\"./MOCK_DATA.json\");\n\n// Route for user registration\napp.post(\"/register\", (req, res) => {\n  const {\n    email,\n    password,\n    name\n  } = req.body;\n\n  // Check if the user is already registered\n  const userExists = registeredUsers.some(user => user.email === email);\n  if (userExists) {\n    return res.status(400).json({\n      message: \"User already exists\"\n    });\n  }\n\n  // Create a new user object\n  const newUser = {\n    email,\n    password,\n    name\n  };\n\n  // Save the user to the registeredUsers array\n  registeredUsers.push(newUser);\n  res.status(200).json({\n    message: \"User registered successfully\"\n  });\n});\n\n// Route for sorting and paginating data\napp.post(\"/sortData\", (req, res) => {\n  const {\n    sortKey,\n    dropdownKey\n  } = req.body;\n  let sortedData = [...mockData];\n  sortedData.sort((a, b) => {\n    const valueA = a[sortKey].toLowerCase();\n    const valueB = b[sortKey].toLowerCase();\n    if (dropdownKey === \"ascending\") {\n      if (valueA < valueB) {\n        return -1;\n      }\n      if (valueA > valueB) {\n        return 1;\n      }\n      return 0;\n    } else if (dropdownKey === \"descending\") {\n      if (valueA > valueB) {\n        return -1;\n      }\n      if (valueA < valueB) {\n        return 1;\n      }\n      return 0;\n    }\n  });\n  const paginatedData = sortedData.length <= pageSize ? sortedData : sortedData.slice(0, pageSize);\n  res.json(paginatedData);\n});\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});","map":{"version":3,"names":["express","require","cors","app","port","pageSize","use","json","registeredUsers","mockData","post","req","res","email","password","name","body","userExists","some","user","status","message","newUser","push","sortKey","dropdownKey","sortedData","sort","a","b","valueA","toLowerCase","valueB","paginatedData","length","slice","listen","console","log"],"sources":["C:/אוניברסיטה/לימודים/סמסטר ו/cisco/‏‏‏‏react-table-tutorial - עותק - עותק/src/App.js"],"sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst app = express();\r\nconst port = 3001;\r\nconst pageSize = 3;\r\n\r\n// Middleware to parse JSON body\r\napp.use(express.json());\r\n\r\n// Enable CORS for all routes\r\napp.use(cors());\r\n\r\n// In-memory storage for registered users\r\nconst registeredUsers = [];\r\n\r\n// Load the mock data\r\nconst mockData = require(\"./MOCK_DATA.json\");\r\n\r\n// Route for user registration\r\napp.post(\"/register\", (req, res) => {\r\n  const { email, password, name } = req.body;\r\n\r\n  // Check if the user is already registered\r\n  const userExists = registeredUsers.some((user) => user.email === email);\r\n\r\n  if (userExists) {\r\n    return res.status(400).json({ message: \"User already exists\" });\r\n  }\r\n\r\n  // Create a new user object\r\n  const newUser = { email, password, name };\r\n\r\n  // Save the user to the registeredUsers array\r\n  registeredUsers.push(newUser);\r\n\r\n  res.status(200).json({ message: \"User registered successfully\" });\r\n});\r\n\r\n// Route for sorting and paginating data\r\napp.post(\"/sortData\", (req, res) => {\r\n  const { sortKey, dropdownKey } = req.body;\r\n\r\n  let sortedData = [...mockData];\r\n\r\n  sortedData.sort((a, b) => {\r\n    const valueA = a[sortKey].toLowerCase();\r\n    const valueB = b[sortKey].toLowerCase();\r\n\r\n    if (dropdownKey === \"ascending\") {\r\n      if (valueA < valueB) {\r\n        return -1;\r\n      }\r\n      if (valueA > valueB) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    } else if (dropdownKey === \"descending\") {\r\n      if (valueA > valueB) {\r\n        return -1;\r\n      }\r\n      if (valueA < valueB) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n  });\r\n\r\n  const paginatedData =\r\n    sortedData.length <= pageSize ? sortedData : sortedData.slice(0, pageSize);\r\n  res.json(paginatedData);\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,GAAG,GAAGH,OAAO,EAAE;AACrB,MAAMI,IAAI,GAAG,IAAI;AACjB,MAAMC,QAAQ,GAAG,CAAC;;AAElB;AACAF,GAAG,CAACG,GAAG,CAACN,OAAO,CAACO,IAAI,EAAE,CAAC;;AAEvB;AACAJ,GAAG,CAACG,GAAG,CAACJ,IAAI,EAAE,CAAC;;AAEf;AACA,MAAMM,eAAe,GAAG,EAAE;;AAE1B;AACA,MAAMC,QAAQ,GAAGR,OAAO,CAAC,kBAAkB,CAAC;;AAE5C;AACAE,GAAG,CAACO,IAAI,CAAC,WAAW,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAClC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAGJ,GAAG,CAACK,IAAI;;EAE1C;EACA,MAAMC,UAAU,GAAGT,eAAe,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACN,KAAK,KAAKA,KAAK,CAAC;EAEvE,IAAII,UAAU,EAAE;IACd,OAAOL,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACb,IAAI,CAAC;MAAEc,OAAO,EAAE;IAAsB,CAAC,CAAC;EACjE;;EAEA;EACA,MAAMC,OAAO,GAAG;IAAET,KAAK;IAAEC,QAAQ;IAAEC;EAAK,CAAC;;EAEzC;EACAP,eAAe,CAACe,IAAI,CAACD,OAAO,CAAC;EAE7BV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACb,IAAI,CAAC;IAAEc,OAAO,EAAE;EAA+B,CAAC,CAAC;AACnE,CAAC,CAAC;;AAEF;AACAlB,GAAG,CAACO,IAAI,CAAC,WAAW,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAClC,MAAM;IAAEY,OAAO;IAAEC;EAAY,CAAC,GAAGd,GAAG,CAACK,IAAI;EAEzC,IAAIU,UAAU,GAAG,CAAC,GAAGjB,QAAQ,CAAC;EAE9BiB,UAAU,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACxB,MAAMC,MAAM,GAAGF,CAAC,CAACJ,OAAO,CAAC,CAACO,WAAW,EAAE;IACvC,MAAMC,MAAM,GAAGH,CAAC,CAACL,OAAO,CAAC,CAACO,WAAW,EAAE;IAEvC,IAAIN,WAAW,KAAK,WAAW,EAAE;MAC/B,IAAIK,MAAM,GAAGE,MAAM,EAAE;QACnB,OAAO,CAAC,CAAC;MACX;MACA,IAAIF,MAAM,GAAGE,MAAM,EAAE;QACnB,OAAO,CAAC;MACV;MACA,OAAO,CAAC;IACV,CAAC,MAAM,IAAIP,WAAW,KAAK,YAAY,EAAE;MACvC,IAAIK,MAAM,GAAGE,MAAM,EAAE;QACnB,OAAO,CAAC,CAAC;MACX;MACA,IAAIF,MAAM,GAAGE,MAAM,EAAE;QACnB,OAAO,CAAC;MACV;MACA,OAAO,CAAC;IACV;EACF,CAAC,CAAC;EAEF,MAAMC,aAAa,GACjBP,UAAU,CAACQ,MAAM,IAAI7B,QAAQ,GAAGqB,UAAU,GAAGA,UAAU,CAACS,KAAK,CAAC,CAAC,EAAE9B,QAAQ,CAAC;EAC5EO,GAAG,CAACL,IAAI,CAAC0B,aAAa,CAAC;AACzB,CAAC,CAAC;AAEF9B,GAAG,CAACiC,MAAM,CAAChC,IAAI,EAAE,MAAM;EACrBiC,OAAO,CAACC,GAAG,CAAE,6BAA4BlC,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}